#include "ros/ros.h"
#include "std_msgs/String.h"
#include <sensor_msgs/LaserScan.h>
#include <geometry_msgs/Twist.h>

#include <sstream>

void callback(const geometry_msgs::Twist::ConstPtr& msg)
{
}

int main(int argc, char **argv)
{

  ros::init(argc, argv, "smart_teleoperation_node");

  /**
   * NodeHandle is the main access point to communications with the ROS system.
   * The first NodeHandle constructed will fully initialize this node, and the last
   * NodeHandle destructed will close down the node.
   */

  ros::NodeHandle n;

  /**
   * The advertise() function is how you tell ROS that you want to
   * publish on a given topic name. This invokes a call to the ROS
   * master node, which keeps a registry of who is publishing and who
   * is subscribing. After this advertise() call is made, the master
   * node will notify anyone who is trying to subscribe to this topic name,
   * and they will in turn negotiate a peer-to-peer connection with this
   * node.  advertise() returns a Publisher object which allows you to
   * publish messages on that topic through a call to publish().  Once
   * all copies of the returned Publisher object are destroyed, the topic
   * will be automatically unadvertised.
   *
   * The second parameter to advertise() is the size of the message queue
   * used for publishing messages.  If messages are published more quickly
   * than we can send them, the number here specifies how many messages to
   * buffer up before throwing some away.
   */

  ros::Publisher smart_teleoperation_node_pub = n.advertise<geometry_msgs::Twist>("cmd_vel", 1000);

  ros::Rate loop_rate(10);

  /**
   * A count of how many messages we have sent. This is used to create
   * a unique string for each message.
   */

  int count = 0;
  while (ros::ok())
  {

    /**
     * This is a message object. You stuff it with data, and then publish it.
     */

    geometry_msgs::Twist twist;
    geometry_msgs::Vector3 linear;
    linear.x = 0.1;
    linear.y = 0;
    linear.z = 0;
    geometry_msgs::Vector3 angular;
    angular.x = 0;
    angular.y = 0;
    angular.z = 0;
    
    twist.linear = linear;
    twist.angular = angular;

    //ROS_INFO("%s", msg.data.c_str());

    /**
     * The publish() function is how you send messages. The parameter
     * is the message object. The type of this object must agree with the type
     * given as a template parameter to the advertise<>() call, as was done
     * in the constructor above.
     */

    smart_teleoperation_node_pub.publish(twist);

    ros::Subscriber sub = n.subscribe("laser_1", 1000, callback);

    ros::spinOnce();

    loop_rate.sleep();

    ++count;
  }


  return 0;
}


